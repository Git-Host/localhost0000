---
:id: 2014-04-organize-files-with-patterns
:slug: 2014-04-organize-files-with-patterns
:title: Organize Files With Patterns
:date: !ruby/object:DateTime 2014-04-20 20:00:00.000000000 -04:00
:tags:
- files
- openfiles
- macros
- javascript
- mvc
:body: ! "\n<div class=\"centered\">\n<h2 style=\"font-weight: 300; margin: 10px 0
  25px 0\"><em>Macro Monday - a new macro to dig into every Monday!</em></h2>\n</div>\n\n<a
  href=\"/assets/images/blog/2014-04/openfiles.png\" class=\"lightbox\">\n    <img
  src=\"/assets/images/blog/2014-04/openfiles_thumb.png\" align=\"right\"/>\n</a>\n\nDid
  you know you can organize your [Open Files] using your own custom patterns?\nThis
  can be incredibly useful for example when you're working in a Project that\nuses
  the MVC pattern. Imagine not just having your files grouped by language but\nalso
  by their pattern (model, view, controller).\n\nTo use your own custom patterns you
  can feed your data straight into the [Open Files]\nlibrary component by accessing
  the Komodo API through your macro. It boils down\nto the following snippet.\n\n```javascript\nko.openfiles.groupers.byPattern.patterns
  = [\n    {\n        // The name you want to give your group\n        name:       'Model',\n\n
  \       // The RegEx pattern that should match the filepath\n        pattern:    /\\/(?:model|models)(?:\\/|$)/i\n
  \   },\n    {\n        name:       'View',\n        pattern:    /\\/(?:view|views)(?:\\/|$)/i\n
  \   },\n    {\n        name:       'Controller',\n        pattern:    /\\/(?:controller|controllers)(?:\\/|$)/i\n
  \   },\n];\n\nko.openfiles.reload(true);\n```\n\nThat's basically all you have to
  do, define some groups and tell [Open Files] to\nreload. The `true` parameter tells
  it to do a full reload, rather than just try\nto sort and group the existing entries.\n\n##
  Dynamic Group Names\n\nMaybe you're one of those devs working in huuuuge projects,
  where just grouping\nby a basic pattern doesn't quite cut it, and writing custom
  patterns for tons of\ndifferent combinations isn't worth the effort. What you can
  do then is use a\npattern and use a Regex group to define your pattern name. Let's
  say we have the\nfollowing folder structure:\n\n * project/views/admin/user.php\n
  * project/views/admin/files.php\n * project/views/invite/user.php\n * project/views/invite/callback.php\n
  * project/views/public/user.php\n\nAnd you want to group these files into the following
  groups:\n\n * Views - admin\n * Views - invite\n * Views - public\n\nYou can use
  a Regex group to define your group names like this:\n\n```javascript\nko.openfiles.groupers.byPattern.patterns
  = [\n    {\n        name:       'Views - %match%',\n        pattern:    /\\/(?:model|models)\\/([a-z0-9_-]*)\\//i\n
  \   }\n];\n\nko.openfiles.reload(true);\n```\n\nYou can probably imagine how powerful
  this can be in huge projects.\n\n## Styling Groups\n\nLet's say you want your group
  to have specific styling and give it's entries a\ncolor and maybe an icon to go
  along with it. To do this you can simply add a \"classlist\"\nattribute to your
  group definition, this attribute should hold an array as its\nvalue which contains
  string values representing the names of CSS classes that\nyou want to add for this
  group and its children. Let's see what this should look\nlike.\n\n```javascript\nko.openfiles.groupers.byPattern.patterns
  = [\n    {\n        name:       'Model',\n        pattern:    /\\/(?:model|models)(?:\\/|$)/i,\n
  \       classlist:  ['pattern_model']\n    }\n];\n\nko.openfiles.reload(true);\n```\n\nUsing
  this pattern all files matching the given pattern will be placed into a\n`Model`
  group and your group label will be given a \"pattern_model\" css class.\nHow you
  decide to style it from there is up to you, for example you could color\nyour group
  label red and give it an icon:\n\n```css\n#openfilesListbox .group-item.pattern_pages\n{\n
  \   color: red;\n    background: url(\"chrome://icomoon/skin/icons/smiley.png\")
  left center no-repeat;\n    padding-left: 18px !important;\n}\n```\n\nYou can easily
  play with some custom styles by installing the [Stylish addon].\n\n   [Open Files]:
  http://komodoide.com/screencasts/watch/87675282-open-files-widget/\n   [Stylish
  addon]: https://addons.mozilla.org/en-US/android/addon/stylish/versions/\n"
:comments: true
:author:
- :id: 6NplBEswso2aMQSyW2iWCe
  :name: Nathan Rijksen
  :biography: Nathan Rijksen is a Komodo developer with web dev expertise. He has
    experience as a backend architect, application developer and database engineer,
    and has worked with third-party authentication and payment modules. Nathan is
    a long time Komodo user and has written multiple macros and extensions before
    joining the Komodo team.
  :profilePhoto:
    :title: NathanRijksen
    :url: //images.contentful.com/bj1g69m2935w/5hTDHHCCtGiW48aU8EKmqo/16ebc63a407a1f3ad30c109aa06415a6/NathanRijksen.jpg
