---
:id: 2013-10-strlen-considered-dangerous
:slug: 2013-10-strlen-considered-dangerous
:title: strlen Considered Dangerous
:date: !ruby/object:DateTime 2013-10-29 00:00:00.000000000 -04:00
:tags:
- bug
- php
:body: ! "\n<div>\n  \t\t\n          <img title=\"pcre at work\" alt=\"pcre at work\"
  style=\"width: auto\" src=\"/assets/images/blog/2013-10/beach-ball-128.png\" class=\"as_feature_img
  as_left\"><p>A user complained that when he loaded a particular PHP file into <a
  href=\"http://www.activestate.com/komodo-ide\">Komodo</a>, the editor would become
  unresponsive, and there would be no code intelligence. A quick check outside the
  editor showed most of what I needed to know about this file:</p>\n  <pre style=\"clear:
  none\">\n    $ wc bug101267a-long-lines.php\n    29 184833 735218 bug101267a-long-lines.php\n
  \ </pre>\n  \n  <p>The file consisted of the PHP header, a 28-line license, and
  a single line of code that, as you can see, was about 735K characters long.</p>\n
  \ \n  <p>We know that Komodo didn't like this kind of code. It turns out it was
  the output from a parser generator. Not the kind of code you would edit, but it
  would be useful to get Komodo to provide code completion off it. Unfortunately,
  we could see that the code-completion module was failing, mainly because the lexer
  it depended on wasn't finishing.</p>\n  \n  <p>I used two separate code beautifiers
  to convert the file to one with lines more suitable for the editor, and got this
  result:</p>\n  <pre>\n    $ wc bug101267c-fixed-lines.php\n    57430 176622 797240
  bug101267c-fixed-lines.php\n  </pre>\n  \n  <p>I'm not sure how we lost 10000 lines
  and about 4600 bytes -- could be due to the first black-box beautifier -- but the
  problem still stood. A command-line lexer could run through the fixed-line file
  in about 2 minutes, while I stopped the long-line file due to all the diagnostics
  I had enabled.</p>\n  \n  <p>Time to read some more code. The lexer spends a good
  deal of time evaluating regular expressions using <tt>pcre</tt>. ToddW suggested
  I benchmark the total time spent with one pass (driven with a command-line tool
  we use, as it's hard to benchmark interactive editors). The results were telling:</p>\n
  \ \n  <table>\n  <thead><tr>\n  <th scope=\"col\">File</th>\n  \n        <th scope=\"col\">#
  calls to pcre_exec</th>\n  \n        <th scope=\"col\">Time</th>\n      </tr></thead>\n
  \ <tr>\n  <td>fixed</td>\n  \n      <td>6,089,093</td>\n  \n      <td>7.8</td>\n
  \   </tr>\n  <tr>\n  <td>long</td>\n  \n      <td>6,172,124</td>\n  \n      <td>1200</td>\n
  \   </tr>\n  </table>\n  <p>The call to pcre_exec looked innocent enough:</p>\n
  \ <pre>\n  rc = pcre_exec(p_compiledPattern,\n                 NULL, // no extra
  data - we didn't study the pattern\n                 p_subject,\n                 (int)
  strlen(p_subject),\n                 oldPos - currLineStart,\n                 PCRE_ANCHORED,
  /* default options */\n                 p_MainInfo-&gt;ovector,   /* output vector
  for substring information */\n                 p_MainInfo-&gt;ovec_count);/* number
  of elements in the output vector */\n  </pre>\n  \n  <p>I didn't see any obvious
  looping code in the <b>pcre</b> source to <tt>pcre_exec</tt>, and Todd asked about
  the call to <tt>strlen</tt>. This module deals with one line of input at a time,
  so we were repeatedly calling <tt>strlen</tt> with a string that contained almost
  800,000 characters. Given the number of calls here, we can see that we're running
  the inner byte comparison of strlen 6,089,093 * 797,240 ~= 4.9+e12 times. That's
  a lot of cycles.</p>\n  \n  <p>Now <tt>p_subject</tt> comes off a simple string
  object, which already knows how long the line is, as it uses <tt>new char[]</tt>
  to allocate enough data. So I replaced the call to <tt>strlen</tt> with a call to
  a LineLength() wrapper I added to the string object's class. And processing the
  long-line file took the same amount of time as the reformatted short-line file.
  It's interesting to note that the short-line file processing time didn't change
  (significantly) after I optimized out the call to <tt>strlen</tt>. When the average
  line of code is only 40 characters, calls to <tt>strlen</tt> take a negligible amount
  of time.</p>\n  \n  <p>I'm always on the lookout for costly loops in my code. But
  as this case shows, they don't always have a \"for\" or \"while\" in them. In this
  case, the loop was hiding in a library call I've used without too much concern since
  I opened my first copy of <a href=\"http://en.wikipedia.org/wiki/The_C_Programming_Language\">K&amp;R</a>.
  Not to mention that the code is now better suited to handle any embedded null bytes.</p>\n</div>\n"
:comments: true
:author:
- :id: 4hoIr9hNNKSSQagw4mSgaY
  :name: Eric Promislow
  :biography: Eric Promislow is a senior developer who's worked on Komodo since the
    very beginning. He has a M.Sc. in Computing Science from Queen's University and
    a B.Sc. in Biophysics from the University of Ontario. Before joining ActiveState,
    he helped create the OmniMark text-processing language.
  :profilePhoto:
    :title: EricPromislow
    :url: //images.contentful.com/bj1g69m2935w/NG8IorgmqIyOaK6USkAOG/2cdb490e97ea0b4ae3fecb8817c74dbf/EricPromislow.jpg
