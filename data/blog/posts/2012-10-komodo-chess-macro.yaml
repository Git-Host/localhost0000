---
:id: 2012-10-komodo-chess-macro
:slug: 2012-10-komodo-chess-macro
:title: ! 'Komodo: Chess Grandmaster'
:date: !ruby/object:DateTime 2012-10-26 00:00:00.000000000 -04:00
:tags:
- javascript
- macro
- Scintilla
:body: ! "\n<div>\n  \t\t\n          <p><img alt=\"Komodo chess program using Javascript
  macro\" class=\"nostyling\" src=\"/assets/images/blog/2012-10/komodo-chess-grandmaster.png\"
  style=\"width: 213px; height: 218px; float: left; padding-right: 10px;\">The macro
  system in Komodo allows for some creative possibilities. I've written a macro that
  provides the ability to replay chess games, utilizing the Komodo editor to display
  the board, game pieces and sequence of moves:</p>\n  <p><a href=\"http://code.activestate.com/recipes/578304\"
  target=\"_blank\">JavaScript macro source code here.</a></p>\n  <p>The sample game
  played by the macro recreates Game 1 of the historic first match between Deep Blue
  (a computer chess playing program written by IBM) and Garry Kasparov in 1996. This
  was the first time a computer program had beaten a chess grandmaster under standard
  chess tournament conditions, proving that computers could challenge the world's
  greatest human minds. Kasparov went on to win the match 4-2, though the following
  year, Deep Blue would take the rematch 3&#189;&#8211;2&#189;.</p>\n  <p><iframe
  allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/8AtxvfyZMSQ\"
  width=\"560\"></iframe></p>\n  <h2>Macros</h2>\n  <p>The <a href=\"http://docs.activestate.com/komodo/7.1/macros.html#macros_writing\"
  target=\"_blank\">Komodo macro system</a> is extremely useful for programmatically
  interacting and controlling the various components inside of Komodo - the most common
  being the text editing widget (the Scintilla plugin, aka \"scimoz\").</p>\n  <p>You
  can run this macro in your Komodo editor by creating a new macro in your Komodo
  toolbox, then copying and pasting the macro source code into the macro content editor.
  After creating the macro, you can execute it by double-clicking it in your toolbox.</p>\n
  \ <p><strong>Note</strong>: If the macro fails to show the chess pieces, you'll
  need to ensure you are using a font that contains the chess piece glyphs, such as
  <em>DejaVu Sans Mono</em>.</p>\n  <p>This chess macro highlights the following Scintilla
  features:</p>\n  <ul>\n  <li>unicode character handling</li>\n  <li>cursor and column
  positioning</li>\n  <li>editor text manipulation</li>\n  <li>indicators - highlighting
  text</li>\n  </ul>\n  <h2>Unicode character handling</h2>\n  <p>The Scintilla editor
  always uses UTF-8 for its character encoding, which means all character positioning
  uses a flexible byte offset, as some unicode characters require multiple bytes while
  ASCII characters require just one byte. The JavaScript (or Python) macro environment
  uses UCS-2, which requires using 2 bytes per character. This encoding difference
  means you need to be aware of the positional difference when communicating between
  JavaScript and Scintilla, and appropriately convert the positions. Komodo provides
  the function <em>ko.stringutils.bytelength(s)</em>, which you can use to calculate
  the UTF-8 byte length of a given string.</p>\n  <p><strong>Note:</strong> If you're
  always using ASCII characters, you can mostly ignore this difference, as the lengths
  between the two will always be the same (ASCII character length == byte length).</p>\n
  \ <h2>Positioning and text manipulation</h2>\n  <p>Here are some of the Scintilla
  API methods used in this macro:</p>\n  <ul>\n  <li>\n  <em>scimoz.lineCount</em>
  - how many lines are in the document</li>\n  <li>\n  <em>scimoz.positionFromLine(lineNo)</em>
  - byte position at the start of the given line</li>\n  <li>\n  <em>scimoz.positionAfter(pos)</em>
  - byte position for the next character</li>\n  <li>\n  <em>scimoz.addText(ko.stringutils.bytelength(line),
  line)</em> - adding text at the current cursor position (scimoz.currentPos)</li>\n
  \ <li>\n  <em>text = scimoz.getTextRange(pos1, pos2)</em> - retrieving a piece of
  the text</li>\n  </ul>\n  <h2>Indicators - highlighting text</h2>\n  <p>Scintilla
  indicators are used to colour the board (ie. the black and white chess squares),
  as well as to highlight the last piece moved. With Komodo, you have the ability
  to programmatically change the colour of indicators and set/clear the positions
  at which they occur. Here are some of the API methods being used to control the
  indicators:</p>\n  <ul>\n  <li>\n  <em>scimoz.indicSetFore(indicNo, 0x000000)</em>
  - setting the indicator color to black</li>\n  <li>\n  <em>scimoz.indicSetStyle(indicNo,
  scimoz.INDIC_ROUNDBOX)</em> - rounded box around the text</li>\n  <li>\n  <em>scimoz.indicSetAlpha(indicNo,
  40)</em> - setting the transparency for the color</li>\n  <li>\n  <em>scimoz.indicatorCurrent
  = indicNo</em> - sets which indicator is being referenced</li>\n  <li>\n  <em>scimoz.indicatorFillRange(pos,
  numbytes)</em> - enable the indicator at the given position and length</li>\n  </ul>\n
  \ <p>All in all, Komodo macros are extremely powerful and can be used to enhance
  your editing prowess. Here are some other links to find out more about Komodo macros:</p>\n
  \ <p><a href=\"http://code.activestate.com/recipes/tags/komodo/\" target=\"_blank\">Example
  Komodo macro recipes</a> - hosted on ActiveState's code site</p>\n  <p><a href=\"http://docs.activestate.com/komodo/7.1/macroapi.html#macroapi_js\"
  target=\"_blank\">JavaScript macro API</a></p>\n  <p><a href=\"http://docs.activestate.com/komodo/7.1/macros.html#macros_writing\"
  target=\"_blank\">Komodo macro system</a></p>\n</div>\n"
:comments: true
:author:
- :id: 1KZmNYa8TOCmE2KKk0EysM
  :name: Todd Whiteman
  :biography: ! 'Todd Whiteman is the Development Lead for Komodo IDE. He works adeptly
    with

    Mozilla, Python and JavaScript to ensure that Komodo IDE is the IDE of choice

    for development teams. Todd has been working on Komodo IDE for nearly 6 years,

    adding components such as the Vi Key Bindings, Distributed Source Code Control,

    64-bit Linux builds as well as Remote SSH support into Komodo IDE.'
  :profilePhoto:
    :title: ToddWhiteman
    :url: //images.contentful.com/bj1g69m2935w/1XjTWQ4gew6GyG4yMUuGQQ/54f995ac054cc228ffb45ba6d7d39313/ToddWhiteman.jpg
