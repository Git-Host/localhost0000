---
:id: 2014-08-debugging-komodo-with-komodo
:slug: 2014-08-debugging-komodo-with-komodo
:title: Debug Komodo with Komodo
:date: !ruby/object:DateTime 2014-08-14 06:00:00.000000000 -04:00
:tags:
- debugging
- python
- Komodo IDE
- remote debugging
:body: ! "\n<div class=\"push-right toc\">\n    <ul>\n        <li>\n            <a
  href=\"#context\">Context and Packages</a>\n        </li>\n        <li>\n            <a
  href=\"#add_debugging\">Add JIT to Komodo</a>\n        </li>\n        <li>\n            <a
  href=\"#try_it\">Try It Out</a> \n        </li>\n    </ul>\n</div>\n\nRecently I
  was providing support to a customer who was having issues with a Komodo\ncomponent.
  \ Unfortunately, when that component was originally written, logging was\nadded
  but it lacked any debug statements.  So asking the user to enable debug level logging\nfor
  the component didnt help much.  \n\nI had been testing remote Python debugging\nin
  Komodo just before so I decided to try a trick I'd heard about from Komodo \nDeveloper
  Mark Yen, to debug Komodo using Komodo.  It took a little bit of head \nscratching
  but given that I knew remote debugging fairly well it was just a matter \nof putting
  all the pieces into the right place.  That's what I'm going to share with\nyou.
  \ Remote debugging Komodo's Python code, using Komodo.\n\n<a name=\"context\"/>\n##
  Context and Packages  \nTo allow remote Python debugging you need to add the Komodo
  debugging package to\nthe language path.  The Python debugging package can be found
  either in your Komodo\ninstall *(Komodo Install Dir)/lib/support/dbgp*, or on the
  [ActiveState Code](http://code.activestate.com/komodo/remotedebugging/) section.\n\nAs
  many of you probably know, Komodo runs primarily on two dynamic languages:\nJavascript
  and Python.  Komodo ships with its own siloed Python to make our lives\neasier.
  \ It's a standard...ish Python install.  The [Komodo Python remote debugging docs](http://docs.activestate.com/komodo/latest/debugpython.html#Installing_the_Python_Remote_Debugger)\ntell
  you to add the **dbgp** package location to the PythonPath but as far as I know,\nwe
  don't easily have control over that in Komodo's world.\n\nSince Komodo's Python
  is a pretty standard Python install, I decided to do the wrong\nthing and just add
  the dbgp package to *(Komodo Install Dir)/lib/Python/Lib/site-packages/*.\nNow Komodo
  will find it on startup.\n\nThat's a good start so far.\n\n<a name=\"add_debugging\"></a>\n##
  Add JIT to Komodo (add debugging)\nNow that we have the debugging package installed
  in Komodo's siloed Python, we \nhave access to the debugger.  But now what?  We
  can't click *Go* in Komodo the\ncomponent file...can I?\n\nNo, no you can't.  Komodo
  is already running so the code can be started again.  \nBesides, it's impossible
  to start debugging Komodo in that traditional manner \nsince it's the Mozilla framework
  (mostly C++) that does the initial object \ncreation and launching of various Python
  components.\n\nWhat we need here is [Just in Time (JIT) debugging](http://docs.activestate.com/komodo/latest/debugpython.html#debugpython_dbgpclient_functions)\nprovided
  by *dbgp.client.brk()*.  This allows us to trigger a breakpoint in our\nrunning
  code and cause Python to request a debugging session from the Komodo \nyou point
  it at.  \n\nWe are CLOSE now.\n\n<a name=\"try_it\"/>\n## Try It Out \nWhen I started
  fiddling with this I was digging into the Publishing\n code so let's plug some breakpoints
  in there.  The [Publishing Tool in Komodo IDE](http://docs.activestate.com/komodo/latest/publish.html#publish_top)\nis
  integrated into the source as an \"extension\" of Komodo.  You can find it's\nsource
  at *(Komodo Install Dir)/lib/mozilla/extensions/publishing@ActiveState.com/components/*.\nYou'll
  start by importing **brk** from the **dbgp** package.  I do this at the\ntop of
  the file, force of habit:\n```python\nfrom dbgp.client import brk  ### added dbgp.client.brk
  CGCH\n```\nI then put a *brk()* function in the **pushLocalUri** function in **koPublishing.py**.\nThis
  SHOULD be around line 572.\n\n```python\ndef pushLocalUri(self, uri, transferCallback=None,
  forcePush=False, pubSettings=None):\n    brk(host=\"127.0.0.1\", port=9005) ###
  \ added breakpoint CGCH\n```\n\nWhen Komodo hits this *brk()* a debugging session
  will be requested. Make sure\nyou've got your Komodo set to listen on the correct
  **port** seen above: *Edit menu\n(Komodo on mac) > Preferences > Debugging > Connection*.
  \ Also make sure that\nKomodo is listening: *Debug menu > Listen for Debugging Connections*.\n\nAt
  this point you should see a problem, \"Hey, WTF Carey?  I'm already running\nKomodo
  while editing these files.  Do I restart Komodo and have it debug itself\nin the
  same instance?  Won't Komodo lock up when it hits a breakpoint?\"  And the\nanswer
  to that is \"Word\", or \"Yes it will\".\n\nYou're going to start a second Komodo
  instance using the commandline and the\n**KOMODO_USERDATADIR** environmental variable.
  \ \"set\" or \"export\" (linux, OSX) KOMODO_USERDATADIR in the\ncommandline then
  start Komodo from the same commandline terminal window by executing\nthe Komodo
  binary in the Komodo installs root directory.  We'll call this instance the\n**debugged
  instance**.  It is the instance you will be \"walking\"\nthrough with the debugger.
  \ We'll call the Komodo currently running the **debugger instance**.\n\nYou could
  also do what I'm doing;  Download the [latest Komodo 9 Alpha](http://komodoide.com/download/)\npre-release
  build and use that as the **debugger instance** instance.  For those of you from
  the\nfuture, isn't the Commando (new Fast Open) feature awesome!?\n\nOnce Komodo
  **debugged instance** has started, configure a Publishing account with it and try\npushing
  a file. This should immediately trigger a debugging request alert box to\npop up
  in Komodo **debugger instance**.  Click \"Yes\" and start walking through the code
  using\nthe Komodo **debugger instance** debugger.\n\nThat about sums it up.  Try
  placing breakpoints throughout the Komodo Python and\nhave fun.\n\nTill next time!\n"
:comments: true
:author:
- :id: 6zO8F6VtbUEOmAAwsysqM6
  :name: Carey Hoffman
  :biography: Carey made the logical switch from snowboard instructing and treeplanting
    to the technology industry in 2009, taking database and network administration
    at BCIT. He is on the technical support and QA team for ActiveState, focusing
    on Stackato Private PaaS and the Komodo IDE where he also contributes to development.
  :profilePhoto:
    :title: CareyHoffman
    :url: //images.contentful.com/bj1g69m2935w/1MeZAzVMKIO6MmmKWkOY8m/e5e1c2e5f90671e4f2e26fe806dc16d5/CareyHoffman.jpg
