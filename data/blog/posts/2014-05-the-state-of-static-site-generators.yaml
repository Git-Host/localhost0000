---
:id: 2014-05-the-state-of-static-site-generators
:slug: 2014-05-the-state-of-static-site-generators
:title: The State of Static Site Generators
:date: !ruby/object:DateTime 2014-05-27 20:00:00.000000000 -04:00
:tags:
- static site generators
- website
- docpad
:body: ! "\nI've been a web developer for over a decade now, and have in that time\nexperienced
  my fair share of CMS woes. I've gone through the stages of using,\nextending, creating
  and ultimately dismissing it all. You name a CMS and I will\nmost likely have played
  with it to some extend; not because I love CMSes (the\ncontrary), but because of
  my insatiable desire for a CMS that just WORKS.\n\nAfter years of searching, using,
  extending and creating I ultimately quite\nliterally dismissed it all in favour
  of what is essentially plain HTML. Like\nmany I started playing with static sites
  generators, at first not quite \"getting\nit\", then having my \"Aha!\" moment.
  Eventually I wanted to use it for just about\neverything. I went from years of developing
  and extending advanced and overly\ninvolved CMSes to plainly just \"using my content\".\n\n##
  Using Your Content\n\nThis is the main difference I see between using a CMS and
  a static site\ngenerator; you are controlling your content, rather than controlling
  a system\nwhich then controls your content. When you write a blog post for a static
  site\ngenerator you have full control(the link, not the  over how you want that
  blog post to appear.\nYou want to write it in markdown, include a bit of custom
  javascript and\nhave your own sidebar? It's a bit unusual, but sure - have at it!
  It's a breeze\nwith a static site generator because you don't have to teach some
  over-arching\nsystem how to make sense of what you're doing. You control your content
  *through*\nyour content, rather than controlling your content through a system which
  is\nbiased in many ways and leaves you struggling to implement things the way you\nenvisioned
  them.\n\n## So What Is a Static Site Generator?\n\nA static site generator is exactly
  what it's name implies; it is a \"generator\"\nwhich pieces your site together,
  based on your instructions. Like a CMS it is\njust a concept, there are many implementations.
  [This website][1] for example\nis [generated by DocPad][2], but there [are many
  alternatives][3].\n\nEssentially you create your site by writing your articles in
  (for example)\nmarkdown, and providing some meta data with your article, eg. the
  date, title\nand the \"layout\" that it should use. The layout can be a simple HTML
  file which\nincludes your JavaScript, CSS and a reference to where your article
  should be, not\nunlike the way you would have a template in a CMS. The difference
  here is that\nit's all handled from your filesystem and with your actual content
  (the article)\nas the main driver of how everything ought to be generated.\n\n##
  Not For Everyone\n\nNow I can already see many people reading this thinking \"but
  what about the\nclients?\" or similar thoughts. The simple fact is that static site
  generators\nare not for everyone, and will never replace the huge selection of CMSes\navailable.
  It is simply a new alternative with a limited applicability. For\nexample static
  site generators in their current state are mostly unable to cope\nwith large databases
  of data. They *are* able to handle it, but the time to generate\nyour site will
  grow linearly with the size of your database.\n\n## Current Limitations\n\nSo it's
  likely not a good idea to use a static site generator for a huge site\nwithout having
  a strong gameplan for handling the issues you will be facing down\nthe road. You'll
  also want to be cautious about using a static site generator\nfor websites containing
  a lot of dynamic (user generated) or session specific\ndata, because your website
  is generated only once and needs to be suitable to\nall visitors at any given time
  of the day. You could work around this by \"filling\nin the blanks\" with AJAXed
  data, but search bots will not pick up on this data\nand so your SEO will be negatively
  affected.\n\nAnother issue I found is developing using a static site generator can
  severely\nreduce your productivity, because something as simple as modifying a CSS
  rule\nor changing an attribute in your layout file will cause your site to regenerate\nand
  so you cannot instantly review your changes.\n\n## The Solution\n\nMost of these
  limitations seem to boil down to the same issue; regeneration is\ncostly. This isn't
  an issue for most CMSes, since pages are generated in\nreal-time (when you visit
  a page on a website, it is generated at that time for\nyour specific visit). Can't
  we meet somewhere in the middle though? Actually,\nwe can! The way I see it, most
  static site generators are essentially a very\nstrong caching system. There is no
  reason we can't invalidate our content at\nruntime and have it regenerate for one
  reason or another - but we don't want our\nentire site to regenerate every time!\n\nSo
  what if we borrow a little bit from the CMS systems; we preserve the static\nsite
  generator functionality while adding a small dynamic piece in between which\nsimply
  checks whether our content is still up-to-date or whether it needs to be\nregenerated.
  We then either pass off the request to the up-to-date static file or\nre-generates
  the file on the fly.\n\nBut - how can we regenerate a file on the fly if the entire
  site is being\nregenerated and we therefore have to wait for this entire process
  to finish?\nWell why does the entire site need to be regenerated? Because files
  are\ninter-connected, that's why! Do'h. But hold on, can't we intelligently decide\n\"which\"
  files are connected, and prioritize the generation of the file that we\nactually
  need, whilst letting the rest of the files regenerate in the background\nwithout
  bothering the end-user? We totally can! And this is what I would like to\nsee happen
  in the future, and is something that [has already been recognized\n(to an extent)
  in DocPad][4] and likely in other static site generators as well.\n\n## The Future\n\nSo
  for me, the future is very bright. I don't anticipate that I won't ever touch\na
  CMS again; as I said static site generators do not replace them, they merely\noffer
  an alternative approach which will be relevant in some cases, and not in\nothers.
  And I look forward to seeing their relevancy increase.\n\n\n  [1]: https://github.com/Komodo/komodo-website\n
  \ [2]: http://docpad.org\n  [3]: http://www.staticgen.com/\n  [4]: https://github.com/bevry/docpad/issues/336\n"
:comments: true
:author:
- :id: 6NplBEswso2aMQSyW2iWCe
  :name: Nathan Rijksen
  :biography: Nathan Rijksen is a Komodo developer with web dev expertise. He has
    experience as a backend architect, application developer and database engineer,
    and has worked with third-party authentication and payment modules. Nathan is
    a long time Komodo user and has written multiple macros and extensions before
    joining the Komodo team.
  :profilePhoto:
    :title: NathanRijksen
    :url: //images.contentful.com/bj1g69m2935w/5hTDHHCCtGiW48aU8EKmqo/16ebc63a407a1f3ad30c109aa06415a6/NathanRijksen.jpg
