// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var vimeofeed, _;
    _ = require("underscore");
    return vimeofeed = (function(_super) {
      __extends(vimeofeed, _super);

      function vimeofeed() {
        return vimeofeed.__super__.constructor.apply(this, arguments);
      }

      vimeofeed.prototype.name = 'vimeofeed';

      vimeofeed.prototype.opts = null;

      vimeofeed.prototype.templateDoc = null;

      vimeofeed.prototype.videosImported = {};

      vimeofeed.prototype.generateBefore = function(opts, next) {
        var self, templateData;
        this.opts = opts;
        templateData = this.opts.templateData;
        self = this;
        if (!templateData.vimeoFeeds) {
          templateData.vimeoFeeds = {};
        }
        if (this.config.user) {
          this.parseAlbums(function() {
            templateData.vimeoFeeds.videos.sort(self.sortById);
            return next();
          });
        } else {
          next();
        }
        return this;
      };

      vimeofeed.prototype.renderBeforePriority = 550;

      vimeofeed.prototype.renderBefore = function(opts, next) {
        this.opts = opts;
        if (this.config.outPath) {
          this.generateDocs(next);
        } else {
          next();
        }
        return this;
      };

      vimeofeed.prototype.iterator = function(fn, arr, next) {
        var docpad, self, _next;
        self = this;
        docpad = this.docpad;
        _next = function(index) {
          var e;
          if (index == null) {
            index = 0;
          }
          if (index === arr.length) {
            return next();
          }
          try {
            return fn.call(self, arr[index], _next.bind(self, ++index));
          } catch (_error) {
            e = _error;
            docpad.log("error", e.message);
            return next();
          }
        };
        return _next();
      };

      vimeofeed.prototype.parseAlbums = function(next) {
        var self, templateData, url;
        self = this;
        templateData = this.opts.templateData;
        if (this.config.dontParse) {
          return next();
        }
        url = 'http://vimeo.com/api/v2/' + this.config.user + '/albums.json';
        if (templateData.vimeoFeeds == null) {
          templateData.vimeoFeeds = {};
        }
        if (!templateData.vimeoFeeds.albums) {
          templateData.vimeoFeeds.albums = [];
        }
        if (!templateData.vimeoFeeds.videos) {
          templateData.vimeoFeeds.videos = [];
        }
        this.request = require('request');
        return this.request(url, function(error, response, body) {
          var albums, done;
          albums = JSON.parse(body);
          albums.sort(self.sortByTitle);
          done = 0;
          _.each(albums, function(album) {
            album.title_sane = self.makeSane(album.title);
            album.videos = [];
            return templateData.vimeoFeeds.albums.push(album);
          });
          return self.iterator(self.parseVideos, albums, next);
        });
      };

      vimeofeed.prototype.parseVideos = function(album, next) {
        var self, templateData, url;
        self = this;
        templateData = this.opts.templateData;
        url = 'http://vimeo.com/api/v2/album/' + album.id + '/videos.json';
        return this.request(url, function(error, response, body) {
          var videos;
          videos = JSON.parse(body);
          _.each(videos, function(video) {
            video.title_sane = self.makeSane(video.title);
            album.videos.push(video);
            if (self.videosImported[video.id] == null) {
              templateData.vimeoFeeds.videos.push(video);
              return self.videosImported[video.id] = true;
            }
          });
          return next();
        });
      };

      vimeofeed.prototype.sortByTitle = function(a, b) {
        if (a.title === b.title) {
          return 0;
        }
        if (a.title < b.title) {
          return -1;
        }
        if (a.title > b.title) {
          return 1;
        }
      };

      vimeofeed.prototype.sortById = function(a, b) {
        var aid, bid;
        aid = parseInt(a.id);
        bid = parseInt(b.id);
        if (aid > bid) {
          return -1;
        }
        if (aid < bid) {
          return 1;
        }
      };

      vimeofeed.prototype.makeSane = function(str) {
        return str.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
      };

      vimeofeed.prototype.generateDocs = function(next) {
        var self, templateData;
        self = this;
        templateData = this.opts.templateData;
        if (!templateData.vimeoFeeds) {
          return next();
        }
        this.templateAlbum = this.docpad.getCollection('documents').findOne({
          filename: this.config.templateAlbum,
          relativeOutDirPath: this.config.outPath
        });
        this.templateVideo = this.docpad.getCollection('documents').findOne({
          filename: this.config.templateVideo,
          relativeOutDirPath: this.config.outPath
        });
        return this.iterator(this.generateDoc, templateData.vimeoFeeds.albums, function() {
          return self.iterator(self.generateDoc, templateData.vimeoFeeds.videos, next);
        });
      };

      vimeofeed.prototype.generateDoc = function(item, next) {
        var attr, collection, database, doc, filename, outPath, outSuffix, templateData, _ref;
        _ref = this.opts, collection = _ref.collection, templateData = _ref.templateData;
        database = this.docpad.getDatabase();
        if (item.tracked) {
          return next();
        }
        item.tracked = true;
        if (item.total_videos) {
          doc = this.docpad.clone(this.templateAlbum);
          outSuffix = 'category';
          filename = item.title_sane + ".html";
        } else {
          doc = this.docpad.clone(this.templateVideo);
          outSuffix = 'watch';
          filename = item.id + "-" + item.title_sane + ".html";
        }
        outPath = doc.get("outDirPath") + "/" + outSuffix + "/" + filename;
        attr = {
          basenameOrig: doc.get("basename"),
          title: item.title,
          outFilename: filename,
          outPath: outPath,
          fullPath: null,
          relativePath: doc.get("relativeDirPath") + "/" + outSuffix + "/" + filename,
          filename: filename,
          outFilename: filename,
          date: (item.upload_date != null) || item.created_on
        };
        doc.set(attr);
        doc.set("feedItem", item);
        doc.setMeta(attr);
        return doc.normalize(function(err) {
          if (!err) {
            collection.add(doc);
            database.add(doc);
          }
          return next();
        });
      };

      return vimeofeed;

    })(BasePlugin);
  };

}).call(this);
